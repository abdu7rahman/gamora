#!/usr/bin/env python

import rospy
from moveit_msgs.msg import DisplayRobotState
from moveit_msgs.srv import GetPositionIK, GetPositionIKRequest
from moveit_commander import MoveGroupCommander
from sensor_msgs.msg import JointState
from visualization_msgs.msg import InteractiveMarkerFeedback

class InteractiveMarkerControl:
    def __init__(self):
        rospy.init_node('interactive_marker_control')

        # Initialize subscribers and publishers
        rospy.Subscriber("/rviz_moveit_motion_planning_display/robot_interaction_interactive_marker_topic/feedback", InteractiveMarkerFeedback, self.marker_callback)
        self.joint_state_pub = rospy.Publisher('/joint_states', JointState, queue_size=10)

        # Initialize MoveIt
        self.move_group = MoveGroupCommander("arm")

    def marker_callback(self, feedback):
        # Set the target pose for the end-effector
        target_pose = feedback.pose
        self.move_group.set_pose_target(target_pose)

        # Plan and execute
        plan = self.move_group.plan()
        if plan:
            self.move_group.execute(plan)

        # Publish joint states
        joint_state = JointState()
        joint_state.header.stamp = rospy.Time.now()
        joint_state.name = self.move_group.get_active_joints()
        joint_state.position = self.move_group.get_current_joint_values()
        self.joint_state_pub.publish(joint_state)

if __name__ == '__main__':
    try:
        marker_control = InteractiveMarkerControl()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass

